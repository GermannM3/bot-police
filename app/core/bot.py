import datetime
import random
import difflib
import logging
from telegram.ext import (
    Application,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    filters,
)
from telegram import Update, ChatPermissions, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from app.core.nlp import NLPProcessor
from app.core.learning import log_flagged_message, log_feedback
from app.config import Config

logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞ —Ç—Ä–µ–∑–≤–æ—Å—Ç—å.
TONGUE_TWISTERS = [
    "–ö–∞—Ä–ª —É –ö–ª–∞—Ä—ã —É–∫—Ä–∞–ª –∫–æ—Ä–∞–ª–ª—ã, –∞ –ö–ª–∞—Ä–∞ —É –ö–∞—Ä–ª–∞ —É–∫—Ä–∞–ª–∞ –∫–ª–∞—Ä–Ω–µ—Ç",
    "–®–ª–∞ –°–∞—à–∞ –ø–æ —à–æ—Å—Å–µ –∏ —Å–æ—Å–∞–ª–∞ —Å—É—à–∫—É",
    "–û—Ç —Ç–æ–ø–æ—Ç–∞ –∫–æ–ø—ã—Ç –ø—ã–ª—å –ø–æ –ø–æ–ª—é –ª–µ—Ç–∏—Ç",
    "–ö–∞–∫ —É—Ç—Ä–æ–º, —Ç–∞–∫ –∏ –≤–µ—á–µ—Ä–æ–º ‚Äì –≤—Å–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —Å–Ω–æ–≤–∞",
    "–ù–∞ –¥–≤–æ—Ä–µ —Ç—Ä–∞–≤–∞, –Ω–∞ —Ç—Ä–∞–≤–µ –¥—Ä–æ–≤–∞"
]

COOLDOWN_SECONDS = 300  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
SIMILARITY_THRESHOLD = 0.8  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–µ
MUTE_TIME_SECONDS = 300     # –í—Ä–µ–º—è –º—É—Ç–∞ (5 –º–∏–Ω—É—Ç)

class PoliceBot:
    def __init__(self):
        self.nlp = NLPProcessor()
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ.
        self.last_warning = {}
        self.last_chat_warning = {}
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞: –∫–ª—é—á ‚Äì (chat_id, user_id), –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì dict —Å –æ–∂–∏–¥–∞–µ–º–æ–π —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–¥–∞—á–∏.
        self.pending_tests = {}

    async def create_app(self) -> Application:
        app = Application.builder().token(Config.TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", self.handle_start))
        app.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è —Å–∫—Ä—ã—Ç–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        app.add_handler(CallbackQueryHandler(self.handle_feedback_callback))
        return app

    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = update.effective_message
        if not message:
            return
        await message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

    async def transcribe_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """
        –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–µ—Ä–≤–∏—Å–æ–º Speech-to-Text.
        """
        message = update.effective_message
        if not message or not message.voice:
            logger.debug("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.")
            return ""
        try:
            voice = message.voice
            file = await context.bot.get_file(voice.file_id)
            file_bytes = await file.download_as_bytearray()
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é.
            transcription = "—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcription}")
            return transcription
        except Exception as ex:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex}")
            return ""

    async def should_warn(self, user_id: int, chat_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ.
        """
        now = datetime.datetime.now()
        user_warned = (user_id in self.last_warning and
                       (now - self.last_warning[user_id]).total_seconds() < COOLDOWN_SECONDS)
        chat_warned = (chat_id in self.last_chat_warning and
                       (now - self.last_chat_warning[chat_id]).total_seconds() < COOLDOWN_SECONDS)
        return not (user_warned or chat_warned)

    async def update_warning_timestamps(self, user_id: int, chat_id: int) -> None:
        now = datetime.datetime.now()
        self.last_warning[user_id] = now
        self.last_chat_warning[chat_id] = now

    def build_feedback_keyboard(self, chat_id: int, user_id: int) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–∫—Ä—ã—Ç–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:
        lhs: üëç (–ª–∞–π–∫), rhs: üëé (–¥–∏–∑–ª–∞–π–∫).
        Callback data —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, chat_id –∏ user_id.
        """
        keyboard = [
            [
                InlineKeyboardButton("üëç", callback_data=f"like|{chat_id}|{user_id}"),
                InlineKeyboardButton("üëé", callback_data=f"dislike|{chat_id}|{user_id}")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def issue_test(self, chat_id: int, user_id: int, message, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –í—ã–¥–∞–µ—Ç —Ç–µ—Å—Ç –Ω–∞ —Ç—Ä–µ–∑–≤–æ—Å—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ–π —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–æ–π –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞.
        """
        tongue_twister = random.choice(TONGUE_TWISTERS)
        self.pending_tests[(chat_id, user_id)] = {
            "expected": tongue_twister,
            "timestamp": datetime.datetime.now()
        }
        response = (
            f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –Ω–∞ —Ç—Ä–µ–∑–≤–æ—Å—Ç—å:\n\n"
            f"–ø—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É: '{tongue_twister}'"
        )
        await self.update_warning_timestamps(user_id, chat_id)
        try:
            await message.reply_text(response, reply_markup=self.build_feedback_keyboard(chat_id, user_id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")

    async def mute_user(self, chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–ª–æ–∂–∏—Ç—å –º—É—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º).
        """
        chat = await context.bot.get_chat(chat_id)
        if chat.type != "supergroup":
            logger.error("–ù–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É—Ç: —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π.")
            return
        member = await context.bot.get_chat_member(chat_id, user_id)
        if member.status == "creator":
            logger.error("–ù–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —á–∞—Ç–∞.")
            return
        try:
            until_date = int((datetime.datetime.now() + datetime.timedelta(seconds=MUTE_TIME_SECONDS)).timestamp())
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=until_date
            )
            logger.info(f"–ú—É—Ç –Ω–∞–ª–æ–∂–µ–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id} –¥–æ {until_date}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º—É—Ç–∞: {e}")

    async def handle_feedback_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.
        Callback data –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç: "feedbackType|chat_id|user_id".
        –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è, –∞ –æ—Ç–≤–µ—Ç –Ω–∞ callback –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—Ç –±–µ–∑ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        data = query.data.split("|")
        if len(data) != 3:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data.")
            return
        feedback_type, chat_id, user_id = data
        chat_id = int(chat_id)
        user_id = int(user_id)
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
        if query.message and query.message.reply_to_message:
            original_text = query.message.reply_to_message.text
        else:
            original_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
        log_feedback(query.from_user.id, chat_id, feedback_type, original_text)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
        await query.answer(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", show_alert=False)

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = update.effective_message
        if not message:
            return
        user = update.effective_user
        chat = update.effective_chat
        if not user or not chat:
            return

        user_id = user.id
        chat_id = chat.id

        # –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å –∫–∞–∫ –æ—Ç–≤–µ—Ç.
        if (chat_id, user_id) in self.pending_tests:
            transcription = await self.transcribe_voice(update, context)
            if not transcription:
                logger.debug("–ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è; –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑.")
                return
            expected = self.pending_tests[(chat_id, user_id)]["expected"]
            similarity = difflib.SequenceMatcher(None, transcription.lower(), expected.lower()).ratio()
            if similarity >= SIMILARITY_THRESHOLD:
                try:
                    await message.reply_text("–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω. –í—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ —Ç—Ä–µ–∑–≤—ã–º–∏!")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
                del self.pending_tests[(chat_id, user_id)]
            else:
                try:
                    await message.reply_text("–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –º—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç.")
                    await self.mute_user(chat_id, user_id, context)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–ª–æ–∂–∏—Ç—å –º—É—Ç: {e}")
                del self.pending_tests[(chat_id, user_id)]
            return

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
        transcription = await self.transcribe_voice(update, context)
        if transcription:
            needs_test = await self.nlp.analyze(transcription)
            if needs_test:
                log_flagged_message(user_id, chat_id, transcription)
                await self.issue_test(chat_id, user_id, message, context)
            else:
                logger.debug("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏).")
        else:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = update.effective_message
        if not message or not message.text:
            return

        user = update.effective_user
        chat = update.effective_chat
        if not user or not chat:
            return

        user_id = user.id
        chat_id = chat.id
        text = message.text.strip()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —Ç–µ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç.
        if (chat_id, user_id) in self.pending_tests:
            expected = self.pending_tests[(chat_id, user_id)]["expected"]
            similarity = difflib.SequenceMatcher(None, text.lower(), expected.lower()).ratio()
            if similarity >= SIMILARITY_THRESHOLD:
                try:
                    await message.reply_text("–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω. –í—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ —Ç—Ä–µ–∑–≤—ã–º–∏!")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
                del self.pending_tests[(chat_id, user_id)]
            else:
                try:
                    await message.reply_text("–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –º—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç.")
                    await self.mute_user(chat_id, user_id, context)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–ª–æ–∂–∏—Ç—å –º—É—Ç: {e}")
                del self.pending_tests[(chat_id, user_id)]
            return

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
        if not await self.should_warn(user_id, chat_id):
            logger.debug(f"–ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–ª–∏ —á–∞—Ç–∞ {chat_id}.")
            return

        needs_test = await self.nlp.analyze(text)
        if needs_test:
            log_flagged_message(user_id, chat_id, text)
            await self.issue_test(chat_id, user_id, message, context)
        else:
            logger.debug("–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
